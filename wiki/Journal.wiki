#summary Weekly journal

== Week 1 ==

  * Study the Google Map API V2.
  * Try to make Google Map to work.

== Week 2 ==

  * *Truong*
    # Google Maps works successfully.
    # Add some marker to the map.

  * *Min Min*
    # Study Google App Engine.
    # Testing connection to network using Google App Engine.

To do next week:
  # Demo of Google App Engine.
  # Login screen.
  # Design database.
  # Get user current location & add button for Home location.
  # Get GPS info from file over the Internet.

== Week 3 ==

 * *Min Min*
   # Set up App Engine Account for Application.
   # Set up Web Application.
   # Set up Google Cloud SQL for database and created tables for data.
   # Still working on communication between the Application and backends.    

 * *Truong*
   # Login Page.
   # Still working on getting current location and put the marker on map.

To do next 2 weeks:
   # Registration, Login, Profile, Update
   # Show available parking spot within the radius of home location.
   # Tab on location and make reservation.
   # Make intent to get navigation to tab location from current location.
   # Working on the UI
   # Show available parking spots
   # Login screen
   # Register screen
   # Profile screen    # updating profile, password
   # Update location spots
   # Base on home location, querry parking spots around half mile
   # Tap on spot, reserver the spot    # marked USED in db intent to navigate, drive to the spot

== Week 4 ==

   # Set up MySQL Database.
   # Deployed PHP API for database access through web.
   # Implemented Java Class in Application for database. 
   # Still working on communication between the Application and backends.    


== Week 5 ==

 * *Min Min*
   # Designed and Created Database Tables.
    * User table with user ID, user_name, password and home location.
    * Location Information table to store Location Address and Description.
   # Deployed PHP Web Server for MySQL Database Access.
    * login.php - check and get PHP _POST user information tags and query from the MySQL database. Then reply success key and message in JSON format.
    * register.php - check and get PHP _POST user information tags and Insert into Database table. Reply success key and message in JSON format.
   # Implemented the JSONParser Class to communicate and get data from Server.
    * This class connect with PHP web server using HTTP Request.
    * Using POST method to send information to web.
    * Getting HTTP response entity back and parse the data into JSON Object.
   # Implemented UserFunctions Class to access data.
    * Initial implementation of some User Functions for getting location information and updating etc.

 * *Truong*
   # Login Activity.
   # Register Activity.
   # Check for correct email and password before login.
   # Set up tabs for Map Layout.
   # Get current location working.
   # Able to add markers on the map.

== Week 6 ==
 * *Truong*
   # UI: Place marker on the map and store that marker to online database.
   # UI: Refresh button will load locations from database and put them as markers on the current map view.
   # UI: Mark the spot is taken (reserve) and refresh the map, the spot will disappear.
   # UI: Marker will only show up in current screen view instead of show up everywhere outside screen border to save phone memory. When user move to a different screen view, refresh button will bring up those available spots on that view.
   # UI: User is able to navigate from current location to the selected spot using the built-in Maps app or Navigation.

 * *Min Min*